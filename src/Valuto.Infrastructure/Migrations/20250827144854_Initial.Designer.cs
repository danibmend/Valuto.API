// <auto-generated />
using System;
using Valuto.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Valuto.Infrastructure.Migrations
{
    [DbContext(typeof(ValutoContext))]
    [Migration("20250827144854_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("JESUS_EM_NOS_DEV")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 60);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Valuto.Domain.Entities.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BAIRRO");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("CEP");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("COMPLEMENTO");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("LOGRADOURO");

                    b.Property<long>("MunicipioId")
                        .HasColumnType("bigint")
                        .HasColumnName("MUNICIPIO_ID");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("NUMERO");

                    b.Property<long>("TipoEnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_ENDERECO_ID");

                    b.HasKey("Id")
                        .HasName("PK_ENDERECO");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("IX_ENDERECO_MUNICIPIO_ID");

                    b.HasIndex("TipoEnderecoId")
                        .HasDatabaseName("IX_ENDERECO_TIPO_ENDERECO_ID");

                    b.ToTable("ENDERECO", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Estado", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("SIGLA");

                    b.HasKey("Id")
                        .HasName("PK_ESTADO");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_ESTADO_NOME");

                    b.HasIndex("Sigla")
                        .IsUnique()
                        .HasDatabaseName("IX_ESTADO_SIGLA");

                    b.ToTable("ESTADO", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Indicador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SIGLA");

                    b.Property<long>("TipoIndicadorId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_INDICADOR_ID");

                    b.HasKey("Id")
                        .HasName("PK_INDICADOR");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_INDICADOR_NOME");

                    b.HasIndex("Sigla")
                        .IsUnique()
                        .HasDatabaseName("IX_INDICADOR_SIGLA");

                    b.HasIndex("TipoIndicadorId")
                        .HasDatabaseName("IX_INDICADOR_TIPO_INDICADOR_ID");

                    b.ToTable("INDICADOR", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Municipio", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CodIbge7")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("COD_IBGE7");

                    b.Property<long>("EstadoId")
                        .HasColumnType("bigint")
                        .HasColumnName("ESTADO_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.HasKey("Id")
                        .HasName("PK_MUNICIPIO");

                    b.HasIndex("CodIbge7")
                        .IsUnique()
                        .HasDatabaseName("IX_MUNICIPIO_COD_IBGE7");

                    b.HasIndex("EstadoId")
                        .HasDatabaseName("IX_MUNICIPIO_ESTADO_ID");

                    b.ToTable("MUNICIPIO", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Juridico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("CNPJ");

                    b.Property<string>("CpfResponsavel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("CPF_RESPONSAVEL");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("ENDERECO_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("NomeResponsavel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME_RESPONSAVEL");

                    b.Property<long>("TipoJuridicoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_Juridico_ID");

                    b.Property<string>("UrlFoto")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("URL_FOTO");

                    b.HasKey("Id")
                        .HasName("PK_Juridico");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("IX_Juridico_CNPJ");

                    b.HasIndex("EnderecoId")
                        .IsUnique()
                        .HasDatabaseName("IX_Juridico_ENDERECO_ID");

                    b.HasIndex("TipoJuridicoId")
                        .HasDatabaseName("IX_Juridico_TIPO_Juridico_ID");

                    b.ToTable("Juridico", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.JuridicoContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("JuridicoId")
                        .HasColumnType("bigint")
                        .HasColumnName("Juridico_ID");

                    b.HasKey("Id")
                        .HasName("PK_Juridico_CONTATO");

                    b.HasIndex("JuridicoId")
                        .HasDatabaseName("IX_Juridico_CONTATO_Juridico_ID");

                    b.ToTable("Juridico_CONTATO", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.SolicitacaoJuridico", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BAIRRO");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("CEP");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("CNPJ");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("COMPLEMENTO");

                    b.Property<string>("CpfResponsavel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("CPF_RESPONSAVEL");

                    b.Property<DateTime?>("DataResolucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DATA_RESOLUCAO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("EmailResponsavel")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EMAIL_RESPONSAVEL");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("LOGRADOURO");

                    b.Property<long>("MunicipioId")
                        .HasColumnType("bigint")
                        .HasColumnName("MUNICIPIO_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("NomeResponsavel")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME_RESPONSAVEL");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("NUMERO");

                    b.Property<long>("SituacaoId")
                        .HasColumnType("bigint")
                        .HasColumnName("SITUACAO_ID");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("TELEFONE");

                    b.Property<string>("TelefoneResponsavel")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("TELEFONE_RESPONSAVEL");

                    b.Property<long>("TipoEnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_ENDERECO_ID");

                    b.Property<long>("TipoJuridicoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_Juridico_ID");

                    b.Property<long>("TipoSolicitacaoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_SOLICITACAO_ID");

                    b.Property<string>("UrlFoto")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("URL_FOTO");

                    b.HasKey("Id")
                        .HasName("PK_SOLICITACAO_Juridico");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("IX_SOLICITACAO_Juridico_MUNICIPIO_ID");

                    b.HasIndex("SituacaoId")
                        .HasDatabaseName("IX_SOLICITACAO_Juridico_SITUACAO_ID");

                    b.HasIndex("TipoEnderecoId")
                        .HasDatabaseName("IX_SOLICITACAO_Juridico_TIPO_ENDERECO_ID");

                    b.HasIndex("TipoJuridicoId")
                        .HasDatabaseName("IX_SOLICITACAO_Juridico_TIPO_Juridico_ID");

                    b.HasIndex("TipoSolicitacaoId")
                        .HasDatabaseName("IX_SOLICITACAO_Juridico_TIPO_SOLICITACAO_ID");

                    b.ToTable("SOLICITACAO_Juridico", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.SolicitacaoPessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("BAIRRO");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("CEP");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("COMPLEMENTO");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DATA_NASCIMENTO");

                    b.Property<DateTime?>("DataResolucao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DATA_RESOLUCAO");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("EMAIL");

                    b.Property<long>("IgrejaId")
                        .HasColumnType("bigint")
                        .HasColumnName("IGREJA_ID");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("LOGRADOURO");

                    b.Property<long>("MunicipioId")
                        .HasColumnType("bigint")
                        .HasColumnName("MUNICIPIO_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("NUMERO");

                    b.Property<long>("SexoId")
                        .HasColumnType("bigint")
                        .HasColumnName("SEXO_ID");

                    b.Property<long>("SituacaoId")
                        .HasColumnType("bigint")
                        .HasColumnName("SITUACAO_ID");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("TELEFONE");

                    b.Property<long>("TipoEnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_ENDERECO_ID");

                    b.Property<long>("TipoSolicitacaoId")
                        .HasColumnType("bigint")
                        .HasColumnName("TIPO_SOLICITACAO_ID");

                    b.Property<string>("UrlFoto")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("URL_FOTO");

                    b.HasKey("Id")
                        .HasName("PK_SOLICITACAO_Pessoa");

                    b.HasIndex("IgrejaId")
                        .HasDatabaseName("IX_SOLICITACAO_Pessoa_IGREJA_ID");

                    b.HasIndex("MunicipioId")
                        .HasDatabaseName("IX_SOLICITACAO_Pessoa_MUNICIPIO_ID");

                    b.HasIndex("SexoId")
                        .HasDatabaseName("IX_SOLICITACAO_Pessoa_SEXO_ID");

                    b.HasIndex("SituacaoId")
                        .HasDatabaseName("IX_SOLICITACAO_Pessoa_SITUACAO_ID");

                    b.HasIndex("TipoEnderecoId")
                        .HasDatabaseName("IX_SOLICITACAO_Pessoa_TIPO_ENDERECO_ID");

                    b.HasIndex("TipoSolicitacaoId")
                        .HasDatabaseName("IX_SOLICITACAO_Pessoa_TIPO_SOLICITACAO_ID");

                    b.ToTable("SOLICITACAO_Pessoa", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.TipoIndicador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("DESCRICAO");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SIGLA");

                    b.HasKey("Id")
                        .HasName("PK_TIPO_INDICADOR");

                    b.HasIndex("Nome")
                        .IsUnique()
                        .HasDatabaseName("IX_TIPO_INDICADOR_NOME");

                    b.HasIndex("Sigla")
                        .IsUnique()
                        .HasDatabaseName("IX_TIPO_INDICADOR_SIGLA");

                    b.ToTable("TIPO_INDICADOR", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DATA_NASCIMENTO");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("ENDERECO_ID");

                    b.Property<long>("IgrejaId")
                        .HasColumnType("bigint")
                        .HasColumnName("IGREJA_ID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NOME");

                    b.Property<long>("SexoId")
                        .HasColumnType("bigint")
                        .HasColumnName("SEXO_ID");

                    b.Property<string>("UrlFoto")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("URL_FOTO");

                    b.HasKey("Id")
                        .HasName("PK_Pessoa");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasDatabaseName("IX_Pessoa_CPF");

                    b.HasIndex("EnderecoId")
                        .IsUnique()
                        .HasDatabaseName("IX_Pessoa_ENDERECO_ID");

                    b.HasIndex("IgrejaId")
                        .HasDatabaseName("IX_Pessoa_IGREJA_ID");

                    b.HasIndex("SexoId")
                        .HasDatabaseName("IX_Pessoa_SEXO_ID");

                    b.ToTable("Pessoa", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.PessoaContato", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PessoaId")
                        .HasColumnType("bigint")
                        .HasColumnName("Pessoa_ID");

                    b.HasKey("Id")
                        .HasName("PK_Pessoa_CONTATO");

                    b.HasIndex("PessoaId")
                        .HasDatabaseName("IX_Pessoa_CONTATO_Pessoa_ID");

                    b.ToTable("Pessoa_CONTATO", "JESUS_EM_NOS_DEV");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ENDERECO_Municipio_MUNICIPIO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoEndereco")
                        .WithMany()
                        .HasForeignKey("TipoEnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ENDERECO_Indicador_TIPO_ENDERECO_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("EnderecoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("EnderecoId");

                            b1.ToTable("ENDERECO", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("EnderecoId");
                        });

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("Municipio");

                    b.Navigation("TipoEndereco");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Estado", b =>
                {
                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("EstadoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("EstadoId");

                            b1.ToTable("ESTADO", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("EstadoId");
                        });

                    b.Navigation("Metadados")
                        .IsRequired();
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Indicador", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.TipoIndicador", "TipoIndicador")
                        .WithMany()
                        .HasForeignKey("TipoIndicadorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_INDICADOR_TipoIndicador_TIPO_INDICADOR_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("IndicadorId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("IndicadorId");

                            b1.ToTable("INDICADOR", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("IndicadorId");
                        });

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("TipoIndicador");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Municipio", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Estado", "Estado")
                        .WithMany("Municipios")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MUNICIPIO_ESTADO_ESTADO_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("MunicipioId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("MunicipioId");

                            b1.ToTable("MUNICIPIO", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("MunicipioId");
                        });

                    b.Navigation("Estado");

                    b.Navigation("Metadados")
                        .IsRequired();
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Juridico", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("Valuto.Domain.Entities.Juridico", "EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Juridico_ENDERECO_ENDERECO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoJuridico")
                        .WithMany()
                        .HasForeignKey("TipoJuridicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Juridico_INDICADOR_TIPO_Juridico_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("JuridicoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("JuridicoId");

                            b1.ToTable("Juridico", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("JuridicoId");
                        });

                    b.Navigation("Endereco");

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("TipoJuridico");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.JuridicoContato", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Juridico", "Juridico")
                        .WithMany("Contatos")
                        .HasForeignKey("JuridicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Juridico_CONTATO_Juridico_Juridico_ID");

                    b.OwnsOne("Valuto.Domain.ValueObjects.Contato", "Contato", b1 =>
                        {
                            b1.Property<long>("JuridicoContatoId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ClassificacaoId")
                                .HasColumnType("bigint");

                            b1.Property<long>("TipoContatoId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("JuridicoContatoId");

                            b1.HasIndex("ClassificacaoId");

                            b1.HasIndex("TipoContatoId");

                            b1.ToTable("Juridico_CONTATO", "JESUS_EM_NOS_DEV");

                            b1.HasOne("Valuto.Domain.Entities.Indicador", "Classificacao")
                                .WithMany()
                                .HasForeignKey("ClassificacaoId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("JuridicoContatoId");

                            b1.HasOne("Valuto.Domain.Entities.Indicador", "TipoContato")
                                .WithMany()
                                .HasForeignKey("TipoContatoId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.Navigation("Classificacao");

                            b1.Navigation("TipoContato");
                        });

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("JuridicoContatoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("JuridicoContatoId");

                            b1.ToTable("Juridico_CONTATO", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("JuridicoContatoId");
                        });

                    b.Navigation("Contato")
                        .IsRequired();

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("Juridico");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.SolicitacaoJuridico", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Juridico_MUNICIPIO_MUNICIPIO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "Situacao")
                        .WithMany()
                        .HasForeignKey("SituacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Juridico_INDICADOR_SITUACAO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoEndereco")
                        .WithMany()
                        .HasForeignKey("TipoEnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Juridico_INDICADOR_TIPO_ENDERECO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoJuridico")
                        .WithMany()
                        .HasForeignKey("TipoJuridicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Juridico_INDICADOR_TIPO_Juridico_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoSolicitacao")
                        .WithMany()
                        .HasForeignKey("TipoSolicitacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Juridico_INDICADOR_TIPO_SOLICITACAO_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("SolicitacaoJuridicoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("SolicitacaoJuridicoId");

                            b1.ToTable("SOLICITACAO_Juridico", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("SolicitacaoJuridicoId");
                        });

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("Municipio");

                    b.Navigation("Situacao");

                    b.Navigation("TipoEndereco");

                    b.Navigation("TipoJuridico");

                    b.Navigation("TipoSolicitacao");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.SolicitacaoPessoa", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Indicador", "Igreja")
                        .WithMany()
                        .HasForeignKey("IgrejaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Pessoa_INDICADOR_IGREJA_ID");

                    b.HasOne("Valuto.Domain.Entities.Municipio", "Municipio")
                        .WithMany()
                        .HasForeignKey("MunicipioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Pessoa_MUNICIPIO_MUNICIPIO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Pessoa_INDICADOR_SEXO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "Situacao")
                        .WithMany()
                        .HasForeignKey("SituacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Pessoa_INDICADOR_SITUACAO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoEndereco")
                        .WithMany()
                        .HasForeignKey("TipoEnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Pessoa_INDICADOR_TIPO_ENDERECO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "TipoSolicitacao")
                        .WithMany()
                        .HasForeignKey("TipoSolicitacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SOLICITACAO_Pessoa_INDICADOR_TIPO_SOLICITACAO_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("SolicitacaoPessoaId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("SolicitacaoPessoaId");

                            b1.ToTable("SOLICITACAO_Pessoa", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("SolicitacaoPessoaId");
                        });

                    b.Navigation("Igreja");

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("Municipio");

                    b.Navigation("Sexo");

                    b.Navigation("Situacao");

                    b.Navigation("TipoEndereco");

                    b.Navigation("TipoSolicitacao");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.TipoIndicador", b =>
                {
                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("TipoIndicadorId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("TipoIndicadorId");

                            b1.ToTable("TIPO_INDICADOR", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("TipoIndicadorId");
                        });

                    b.Navigation("Metadados")
                        .IsRequired();
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Pessoa", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Endereco", "Endereco")
                        .WithOne()
                        .HasForeignKey("Valuto.Domain.Entities.Pessoa", "EnderecoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Pessoa_ENDERECO_ENDERECO_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "Igreja")
                        .WithMany()
                        .HasForeignKey("IgrejaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Pessoa_INDICADOR_IGREJA_ID");

                    b.HasOne("Valuto.Domain.Entities.Indicador", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Pessoa_INDICADOR_SEXO_ID");

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("PessoaId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("PessoaId");

                            b1.ToTable("Pessoa", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("PessoaId");
                        });

                    b.Navigation("Endereco");

                    b.Navigation("Igreja");

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.PessoaContato", b =>
                {
                    b.HasOne("Valuto.Domain.Entities.Pessoa", "Pessoa")
                        .WithMany("Contatos")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Pessoa_CONTATO_Pessoa_Pessoa_ID");

                    b.OwnsOne("Valuto.Domain.ValueObjects.Contato", "Contato", b1 =>
                        {
                            b1.Property<long>("PessoaContatoId")
                                .HasColumnType("bigint");

                            b1.Property<long>("ClassificacaoId")
                                .HasColumnType("bigint");

                            b1.Property<long>("TipoContatoId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Valor")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("PessoaContatoId");

                            b1.HasIndex("ClassificacaoId");

                            b1.HasIndex("TipoContatoId");

                            b1.ToTable("Pessoa_CONTATO", "JESUS_EM_NOS_DEV");

                            b1.HasOne("Valuto.Domain.Entities.Indicador", "Classificacao")
                                .WithMany()
                                .HasForeignKey("ClassificacaoId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.HasOne("Valuto.Domain.Entities.Indicador", "TipoContato")
                                .WithMany()
                                .HasForeignKey("TipoContatoId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("PessoaContatoId");

                            b1.Navigation("Classificacao");

                            b1.Navigation("TipoContato");
                        });

                    b.OwnsOne("Valuto.Domain.Entities.Base.Metadados", "Metadados", b1 =>
                        {
                            b1.Property<long>("PessoaContatoId")
                                .HasColumnType("bigint");

                            b1.Property<DateTime>("DataAtualizacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_ATUALIZACAO");

                            b1.Property<DateTime>("DataCriacao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_CRIACAO");

                            b1.Property<DateTime?>("DataRemocao")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("DATA_REMOCAO");

                            b1.Property<long>("UsuarioAtualizacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_ATUALIZACAO_ID");

                            b1.Property<long>("UsuarioCriacaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_CRIACAO_ID");

                            b1.Property<long?>("UsuarioRemocaoId")
                                .HasColumnType("bigint")
                                .HasColumnName("USUARIO_REMOCAO_ID");

                            b1.HasKey("PessoaContatoId");

                            b1.ToTable("Pessoa_CONTATO", "JESUS_EM_NOS_DEV");

                            b1.WithOwner()
                                .HasForeignKey("PessoaContatoId");
                        });

                    b.Navigation("Contato")
                        .IsRequired();

                    b.Navigation("Metadados")
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Estado", b =>
                {
                    b.Navigation("Municipios");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Juridico", b =>
                {
                    b.Navigation("Contatos");
                });

            modelBuilder.Entity("Valuto.Domain.Entities.Pessoa", b =>
                {
                    b.Navigation("Contatos");
                });
#pragma warning restore 612, 618
        }
    }
}
